spring:
  datasource:
    url: ${DB_URL}
    username: ${DB_USER}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
  sql:
    init:
      mode: never
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        show_sql: true
        format_sql: true
        use_sql_comments: true
        hbm2ddl:
          auto: update
        default_batch_fetch_size: 1000
  servlet:
    multipart:
      max-file-size: 200MB
      max-request-size: 300MB

  data:
    redis:
      host: ${REDIS_HOST}
      port: 6379
      password: ${REDIS_PASSWORD}

  rabbitmq:
    host: ${RABBITMQ_HOST}
    port: 5672
    username: ${RABBITMQ_USERNAME}
    password: ${RABBITMQ_PASSWORD}
    virtual-host: / # 브로커에서 여러 개의 메시지 도메인을 사용할 수 있게 해주는 논리적 그룹

external:
  jwt:
    secret: ${JWT_SECRET_KEY}

kakao:
  redirect-url: https://localhost:8080/login/oauth2/callback/kakao
  client-id: ${KAKAO_CLEINT_ID}
  client-secret: ${KAKAO_CLIENT_SECRET}

rabbitmq:
  queue:
    name: "chat.queue" # 사용할 Queue 이름 지정
  exchange:
    name: "chat.exchange" # 사용할 exchange 이름 (구독할 때 사용)
  routing:
    key: "chat.room.*" # routing-key. chat.room.{room_id}를 구독

cloud:
  aws:
    s3:
      bucket: yeongkkeul-s3
    path:
      user-profile: user-profile
      chatroom-profile: chatroom-profile
      chat: chat
      store-item: store-item
    region:
      static: ap-northeast-2
    stack:
      auto: false
    credentials:
      accessKey: ${S3_ACCESS_KEY_ID}
      secretKey: ${S3_SECRET_ACCESS_KEY}